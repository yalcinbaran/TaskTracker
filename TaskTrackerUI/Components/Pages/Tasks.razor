@page "/tasks"
@inject ITaskService _taskService
@inject ISnackbar Snackbar
@inject ITaskApiService _taskApiService
@inject IDialogService DialogService
@inject AppMessageState _appMessageState

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">

        <div style="display: flex; flex-direction: column; margin-top: 50px;">
            <MudSelect T="int" Label="Durum" Value="@selectedState!.Level" ValueChanged="StateSelectionChanged">
                @foreach (var state in States)
                {
                    <MudSelectItem Value="@state.Level">@state.Name</MudSelectItem>
                }
            </MudSelect>

            <div style="display: flex; flex-direction:column; margin-top:30px;">
                @if (!tasks.Any())
                {
                    <MudElement HtmlTag="a" Style="color:red;font-weight:bold;">@selectedState.Name durumunda görev bulunmuyor.</MudElement>
                }
                else
                {
                    <div style="display: flex; flex-direction:row; justify-content:end">
                        <MudElement HtmlTag="a" Style="color:black;font-weight:bold;">Görevler</MudElement>
                        <MudSpacer />
                        <MudButton Color="Color.Info" Disabled="@_isUpdateDisabled" OnClick="OpenUpdateDialog">Güncelle</MudButton>
                        <MudButton Color="Color.Error" Disabled="@_isDeleteDisabled" OnClick="Delete">Sil</MudButton>
                    </div>
                    <MudDataGrid @ref="@Grid" Items="@tasks" T="TaskItemDTO" Style="margin-top: 20px; width: 100%" MultiSelection="true" ColumnResizeMode="ResizeMode.Column" SelectedItemsChanged="GridSelectionChanged">
                        <Columns>
                            <SelectColumn T="TaskItemDTO" ShowInHeader="false" />
                            <PropertyColumn Property="x => x.Title" Title="Başlık" />
                            <PropertyColumn Property="x => x.Description" Title="Açıklama" />
                            <PropertyColumn Property="x => x.PriorityName" Title="Öncelik" />
                            <PropertyColumn Property="x => x.TaskStateName" Title="Durumu" />
                            <PropertyColumn Property="x => x.DueDate" Title="Teslim Tarihi" Format="dd.MM.yyyy" />
                        </Columns>
                    </MudDataGrid>
                }
            </div>
        </div>
    </MudContainer>
}

<MudDialog Visible="@_isUpdateVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">Görev Güncelle</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@selectedRowsIds.FirstOrDefault()" Style="width: 400px;">
            <MudTextField T="string" Label="Görev Başlığı" @bind-Value="itemToUpdate!.Title" For="@(()=>itemToUpdate!.Title)" />
            <MudTextField T="string" Label="Görev Açıklaması" @bind-Value="itemToUpdate!.Description" For="@(() => itemToUpdate!.Description)" />
            <MudSelect T="string" Label="Öncelik" @bind-Value="itemToUpdate!.PriorityName" For="@(()=>itemToUpdate.PriorityName)">
                @foreach (var priority in _taskApiService.GetPrioritiesAsync().Result)
                {
                    <MudSelectItem Value="@priority.Level">@priority.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Durum" @bind-Value="itemToUpdate!.PriorityName" For="@(()=>itemToUpdate.PriorityName)">
                @foreach (var state in _taskApiService.GetStatesAsync().Result)
                {
                    <MudSelectItem Value="@state.Level">@state.Name</MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker Label="Teslim Tarihi"
                           DateChanged="@(date => itemToUpdate.DueDate = date!.Value)"
                           DateFormat="dd.MM.yyyy"
                           PickerVariant="PickerVariant.Inline"
                           MinDate="@dateTime" />
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    MudDataGrid<TaskItemDTO>? Grid;
    private IEnumerable<StateDto> States = new List<StateDto>();
    private IEnumerable<PriorityDto> Priorities = new List<PriorityDto>();
    private IEnumerable<TaskItemDTO> tasks = new List<TaskItemDTO>();
    List<Guid> selectedRowsIds = [];
    private bool _isDeleteDisabled = true;
    private bool _isUpdateDisabled = true;
    private int stateLevel = 0;
    private StateDto? selectedState { get; set; }
    private bool _isLoading = true;
    private bool _isUpdateVisible = false;
    private TaskItemDTO? itemToUpdate { get; set; }
    private DateTime dateTime = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(_appMessageState.SnackbarMessage))
        {
            Snackbar.Add(_appMessageState.SnackbarMessage, _appMessageState.SnackbarSeverity);
            _appMessageState.SnackbarMessage = null;
        }
        States = await _taskApiService.GetStatesAsync();
        Priorities = await _taskApiService.GetPrioritiesAsync();
        States = States.Append(new StateDto { Level = 0, Name = "Tümü" });
        await StateSelectionChanged(0);
    }

    async Task StateSelectionChanged(int level)
    {
        _isLoading = true;
        stateLevel = level;
        selectedState = States.Where<StateDto>(s => s.Level == level).FirstOrDefault();
        if (stateLevel == 0)
        {
            var result = await _taskService.GetAllTasksAsync();
            tasks = result.Where(t => t.DueDate >= DateTime.Today);
        }
        else
        {
            var result = await _taskService.GetTasksByStateAsync(stateLevel);
            tasks = result.Where(t => t.DueDate >= DateTime.Today);
        }
        if (Grid != null)
            Grid.SelectedItems.Clear();
        selectedRowsIds.Clear();
        _isDeleteDisabled = true;
        _isLoading = false;
        StateHasChanged();
    }

    void GridSelectionChanged(HashSet<TaskItemDTO> taskItems)
    {
        selectedRowsIds.Clear();
        foreach (var item in taskItems)
        {
            selectedRowsIds.Add(item.Id);
        }
        if (taskItems.Count == 1)
        {
            itemToUpdate = taskItems.ElementAt(0);
        }
        else
        {
            itemToUpdate = null;
        }
        _isUpdateDisabled = taskItems.Count() == 1 ? false : true;
        _isDeleteDisabled = taskItems.Count() > 0 ? false : true;
        StateHasChanged();
    }

    async Task Delete()
    {
        _isUpdateDisabled = true;
        _isDeleteDisabled = true;
        if (selectedRowsIds.Count() > 0)
        {
            if (selectedRowsIds.Count() == 1)
            {
                try
                {
                    var response = await _taskService.DeleteTaskAsync(selectedRowsIds[0]);

                    if (response.Success)
                    {
                        Snackbar.Add($"{response.Data!.TaskTitle} başlıklı görev silindi.", Severity.Success);
                        tasks = await _taskService.GetAllTasksAsync();
                        Grid!.SelectedItems.Clear();
                    }
                    else
                    {
                        Snackbar.Add(response.Data?.ErrorMessage ?? response.Message ?? "Silme işlemi başarısız", Severity.Error);
                    }
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Hata: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                try
                {
                    var response = await _taskService.BulkDeleteAsync(selectedRowsIds);

                    if (response.Success)
                    {
                        Snackbar.Add($"{response.Data!.TotalDeleted} görev silindi.", Severity.Success);
                    }
                    else if (response.PartialSuccess)
                    {
                        string failedTitles = string.Join("\n• ", response.Data!.FailedTasks.Select(ft => ft.TaskTitle));
                        Snackbar.Add($"{response.Data.TotalDeleted} görev silindi, ancak {response.Data.FailedTasks.Count} görev silinemedi.\nSilinemeyen görevler:\n• {failedTitles}", Severity.Warning);
                    }
                    else
                    {
                        Snackbar.Add(response.Message ?? "Silme işlemi başarısız", Severity.Error);
                    }

                    if (response.Success || response.PartialSuccess)
                    {
                        tasks = await _taskService.GetAllTasksAsync();
                    }
                    Grid!.SelectedItems.Clear();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Hata: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Silinecek görev seçilmedi.", Severity.Warning);
        }
        _isDeleteDisabled = false;
        _isUpdateDisabled = false;
    }

    private async Task OpenUpdateDialog()
    {
        var parameters = new DialogParameters { ["Task"] = itemToUpdate };
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialogReference = await DialogService.ShowAsync<UpdateTaskDialog>("Görev Güncelle", parameters, options);
        var dialogResult = await dialogReference.Result;

        if (!dialogResult!.Canceled)
        {
            var response = dialogResult.Data as ApiResponse<OperationResult>;
            if (response?.Success == true)
            {
                Snackbar.Add("Görev başarıyla güncellendi.", Severity.Success);
                tasks = await _taskService.GetAllTasksAsync();
                Grid!.SelectedItems.Clear();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Güncelleme başarısız.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("İşlem iptal edildi.", Severity.Info);
        }
    }


    private int GetPriorityLevelFromName(string? name)
    {
        return Priorities.FirstOrDefault(p => p.Name == name)?.Level ?? 0;
    }

    private int GetStateLevelFromName(string? name)
    {
        return States.FirstOrDefault(s => s.Name == name)?.Level ?? 0;
    }
}
